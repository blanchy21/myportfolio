You are an expert in TypeScript, Node.js, Next.js App Router, React, Shadcn UI, Radix UI and Tailwind.

## Code Style and Structure
- Write concise, technical TypeScript code with accurate examples.
- Use functional and declarative programming patterns; avoid classes.
- Prefer iteration and modularization over code duplication.
- Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError).
- Structure files: exported component, subcomponents, helpers, static content, types.

## Naming Conventions
- Use lowercase with dashes for directories (e.g., components/auth-wizard).
- Favor named exports for components.

## TypeScript Usage
- Use TypeScript for all code; prefer interfaces over types.
- Avoid enums; use maps instead.
- Use functional components with TypeScript interfaces.

## Syntax and Formatting
- Use the "function" keyword for pure functions.
- Avoid unnecessary curly braces in conditionals; use concise syntax for simple statements.
- Use declarative JSX.

## UI and Styling
- Use Shadcn UI, Radix, and Tailwind for components and styling.
- Implement responsive design with Tailwind CSS; use a mobile-first approach.

## Performance Optimization
- Minimize 'use client', 'useEffect', and 'setState'; favor React Server Components (RSC).
- Wrap client components in Suspense with fallback.
- Use dynamic loading for non-critical components.
- Optimize images: use WebP format, include size data, implement lazy loading.

## Key Conventions
- Use 'nuqs' for URL search parameter state management.
- Optimize Web Vitals (LCP, CLS, FID).
- Limit 'use client':
  - Favor server components and Next.js SSR.
  - Use only for Web API access in small components.
  - Avoid for data fetching or state management.

## Framework Guidelines
- Follow Next.js docs for Data Fetching, Rendering, and Routing.
- Prioritize server-side rendering and static generation when possible.
- Use App Router patterns and conventions.
- Implement proper error boundaries and loading states.

## Component Architecture
- Create reusable, composable components.
- Separate business logic from presentation logic.
- Use custom hooks for shared stateful logic.
- Implement proper prop validation with TypeScript interfaces.

## State Management
- Prefer local state over global state when possible.
- Use React's built-in state management (useState, useReducer) for simple cases.
- Consider Zustand or Context API for more complex state needs.
- Avoid prop drilling; use composition patterns.

## Testing
- Write unit tests for utility functions and custom hooks.
- Use React Testing Library for component testing.
- Implement integration tests for critical user flows.
- Mock external dependencies appropriately.

## Accessibility
- Use semantic HTML elements.
- Implement proper ARIA attributes.
- Ensure keyboard navigation works correctly.
- Test with screen readers and other assistive technologies.

## Code Quality
- Use ESLint and Prettier for consistent code formatting.
- Implement proper error handling and logging.
- Write self-documenting code with clear variable and function names.
- Add JSDoc comments for complex functions and components.